[{"E:\\Projects\\metro_maker\\src\\index.js":"1","E:\\Projects\\metro_maker\\src\\reportWebVitals.js":"2","E:\\Projects\\metro_maker\\src\\App.js":"3","E:\\Projects\\metro_maker\\src\\sidebar.js":"4","E:\\Projects\\metro_maker\\src\\components\\testButton.js":"5","E:\\Projects\\metro_maker\\src\\app\\store.js":"6","E:\\Projects\\metro_maker\\src\\reducers\\linesReducer.js":"7","E:\\Projects\\metro_maker\\src\\reducers\\servicesReducer.js":"8","E:\\Projects\\metro_maker\\src\\reducers\\rootReducer.js":"9","E:\\Projects\\metro_maker\\src\\actions\\actionTypes.js":"10","E:\\Projects\\metro_maker\\src\\actions\\lineActions.js":"11","E:\\Projects\\metro_maker\\src\\actions\\serviceActions.js":"12","E:\\Projects\\metro_maker\\src\\utils\\utils.js":"13","E:\\Projects\\metro_maker\\src\\components\\testButtonItem.js":"14","E:\\Projects\\metro_maker\\src\\actions\\agencyActions.js":"15","E:\\Projects\\metro_maker\\src\\reducers\\agenciesReducer.js":"16","E:\\Projects\\metro_maker\\src\\reducers\\serviceRouteReducer.js":"17","E:\\Projects\\metro_maker\\src\\reducers\\stationsReducer.js":"18","E:\\Projects\\metro_maker\\src\\reducers\\trackReducer.js":"19","E:\\Projects\\metro_maker\\src\\reducers\\trackRouteReducer.js":"20","E:\\Projects\\metro_maker\\src\\reducers\\transferReducer.js":"21"},{"size":4197,"mtime":1620256291547,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":238,"mtime":1614227991355,"results":"25","hashOfConfig":"23"},{"size":326,"mtime":1609641548714,"results":"26","hashOfConfig":"27"},{"size":688,"mtime":1619929881450,"results":"28","hashOfConfig":"23"},{"size":167,"mtime":1610773355537,"results":"29","hashOfConfig":"23"},{"size":2817,"mtime":1621992869509,"results":"30","hashOfConfig":"23"},{"size":3526,"mtime":1621992840518,"results":"31","hashOfConfig":"23"},{"size":3692,"mtime":1622062266289,"results":"32","hashOfConfig":"23"},{"size":2895,"mtime":1621618309526,"results":"33","hashOfConfig":"23"},{"size":1261,"mtime":1620238637721,"results":"34","hashOfConfig":"23"},{"size":1077,"mtime":1622043141154,"results":"35","hashOfConfig":"23"},{"size":2916,"mtime":1622062148778,"results":"36","hashOfConfig":"23"},{"size":231,"mtime":1614228296845,"results":"37","hashOfConfig":"23"},{"size":1372,"mtime":1621819038815,"results":"38","hashOfConfig":"23"},{"size":1831,"mtime":1621992875292,"results":"39","hashOfConfig":"23"},{"size":18564,"mtime":1621796542765,"results":"40","hashOfConfig":"23"},{"size":1845,"mtime":1621044599011,"results":"41","hashOfConfig":"23"},{"size":1893,"mtime":1621207938585,"results":"42","hashOfConfig":"23"},{"size":15362,"mtime":1621128090155,"results":"43","hashOfConfig":"23"},{"size":4442,"mtime":1622063010823,"results":"44","hashOfConfig":"23"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},"1xzmqcv",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e2pt3f",{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\Projects\\metro_maker\\src\\index.js",["93","94","95","96","97","98","99","100","101","102","103","104"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './app/store'\n\nimport {selectAgenciesLinesAndServicesAsTreeObject,selectLinesAndServicesAsTreeObject,selectServicesAsTreeObject} from './reducers/rootReducer'\nimport { addAgency, editAgency, removeAgency ,restoreAgency} from './actions/agencyActions';\nimport { addLine, editLine, removeLine ,restoreLine} from './actions/lineActions';\nimport { addService, editService, removeService, restoreService } from './actions/serviceActions';\nimport {filterDeleted, nextIDForArray} from './utils/utils'\nimport { selectServicesGivenLineID,selectServicesGivenAgencyID,serviceIDsGivenAgencyID } from './reducers/servicesReducer';\n\nimport { lineIDsGivenAgencyId,selectLinesGivenAgencyId } from './reducers/linesReducer';\n\n\nstore.dispatch(addAgency('go','green'));\nstore.dispatch(addAgency('ttc','red'));\nstore.dispatch(addAgency('yrt','cyan'));\n\nstore.dispatch(editAgency('2','yrt-viva','blue'));\n\nstore.dispatch(addLine('0','stouffville','brown','commuter/regional'));\nstore.dispatch(addLine('0','barrie','navy blue','commuter/regional'));\nstore.dispatch(addLine('0','lakeshore west','maroon','commuter/regional'));\nstore.dispatch(addLine('0','lakeshore east','orange-red','commuter/regional'));\nstore.dispatch(addLine('0','milfton','orange yellow','commuter/regional'));\n\nstore.dispatch(editLine('4','milton','orange yellow','commuter/regional'));\n\nstore.dispatch(addLine('1','yonge university','yellow','heavy metro'));\nstore.dispatch(addLine('1','sheppard','purple','heavy metro'));\nstore.dispatch(addLine('1','bloor danforth','green','heavy metro'));\nstore.dispatch(addLine('1','eglinton','orange','light metro'));\nstore.dispatch(addLine('1','scarborough','cyan','light metro'));\n\nstore.dispatch(addLine('2','viva blue','blue','brt'));\nstore.dispatch(addLine('2','viva purple','purple','brt'));\nstore.dispatch(addLine('2','viva green','lime green','brt'));\nstore.dispatch(addLine('2','viva yellow','yellow','brt'));\n\nstore.dispatch(addService('0','stouffville RER','express'));\nstore.dispatch(addService('0','stouffville commuter','peak only'));\nstore.dispatch(addService('1','barrie RER','express'));\nstore.dispatch(addService('1','barrie commuter','peak only'));\nstore.dispatch(addService('2','lakeshore west RER','express'));\nstore.dispatch(addService('2','lakeshore west commuter','peak only'));\nstore.dispatch(addService('3','lakeshore east RER','express'));\nstore.dispatch(addService('3','lakeshore east commuter','peak only'));\nstore.dispatch(addService('4','milton commuter','peak only'));\n\nstore.dispatch(addService('5','yonge university','local'));\nstore.dispatch(addService('6','sheppard','local'));\nstore.dispatch(addService('7','bloor danforth','local'));\nstore.dispatch(addService('8','eglinton','local'));\nstore.dispatch(addService('9','scarborough','local'));\n\nstore.dispatch(editService('9','yonge university spadina','local'));\n\nstore.dispatch(addService('10','bernard terminal','local'));\nstore.dispatch(addService('10','newmarket','express'));\nstore.dispatch(addService('11','richmond hill-mccowan','local'));\nstore.dispatch(addService('11','martin grove-mccowan','peak only'));\n\nstore.dispatch(removeService('14'));\nstore.dispatch(removeService('13'));\nstore.dispatch(removeLine('10'));\nstore.dispatch(removeAgency('0'));\n\n// store.dispatch(addAgency('miway','orange'));\n\n// store.dispatch(restoreService('14'));\n// store.dispatch(restoreService('13'));\n// store.dispatch(restoreLine('10'));\nstore.dispatch(restoreAgency('0'));\n// store.dispatch(removeAgency('0'));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nconsole.log(selectAgenciesLinesAndServicesAsTreeObject(store.getState(),false))\nconsole.log(selectServicesGivenAgencyID(store.getState(),0,true))\nconsole.log(selectServicesGivenAgencyID(store.getState(),0,false))\n\n\nlet testArray = [\n  {id:0,deletedAt: null},\n  {id:1,deletedAt: null},\n  {id:2,deletedAt: null},\n  {id:3,deletedAt: \"today\"},\n]\n",["105","106"],"E:\\Projects\\metro_maker\\src\\reportWebVitals.js",[],"E:\\Projects\\metro_maker\\src\\App.js",[],"E:\\Projects\\metro_maker\\src\\sidebar.js",[],"E:\\Projects\\metro_maker\\src\\components\\testButton.js",["107","108","109"],"import React, { useState } from 'react';\r\nimport { useSelector, useDispatch, connect } from 'react-redux';\r\n\r\nimport {selectAllAgencies} from '../reducers/agenciesReducer.js'\r\nimport TestButtonItem from './testButtonItem'\r\n\r\nconst TestButton = ({operators}) =>(\r\n    <ul className = \"operator-list\">\r\n        {operators && operators.length ? operators.map((operator,index) =>{\r\n            return <TestButtonItem operator = {operator}/>\r\n        })\r\n        : \"No Operators\"\r\n        }\r\n        </ul>\r\n);\r\n\r\n\r\n    \r\n\r\n\r\nconst mapStateToProps = state => {\r\n    const operators = selectAllAgencies(state);\r\n\r\n    return {operators}\r\n}\r\n\r\nexport default connect(mapStateToProps)(TestButton);","E:\\Projects\\metro_maker\\src\\app\\store.js",[],"E:\\Projects\\metro_maker\\src\\reducers\\linesReducer.js",["110"],"E:\\Projects\\metro_maker\\src\\reducers\\servicesReducer.js",["111","112"],"E:\\Projects\\metro_maker\\src\\reducers\\rootReducer.js",["113","114"],"import { combineReducers } from 'redux';\r\nimport agencyReducer from '../reducers/agenciesReducer';\r\nimport { selectAllAgencies } from '../reducers/agenciesReducer';\r\nimport linesReducer from '../reducers/linesReducer';\r\nimport { selectLinesGivenAgencyId } from '../reducers/linesReducer';\r\nimport servicesReducer, { doAddService } from '../reducers/servicesReducer';\r\nimport { selectServicesGivenLineID } from '../reducers/servicesReducer';\r\nimport serviceRouteReducer, { doAddServiceRoute } from '../reducers/serviceRouteReducer';\r\nimport stationReducer, { selectStationsGivenStationIDs } from '../reducers/stationsReducer';\r\nimport { addStation, selectAllNodeIdsGivenStationIDs } from '../reducers/stationsReducer';\r\nimport { nextIDForArray } from '../utils/utils';\r\nimport {\r\n    ADD_SERVICE,\r\n    ADD_TRACK,\r\n} from '../actions/actionTypes';\r\nimport trackReducer, { doAddTrack } from './trackReducer';\r\nimport trackRouteReducer, { doAddTrackRoute } from './trackRouteReducer'\r\nimport transferReducer from './transferReducer';\r\n\r\nconst combinedReducers = combineReducers({\r\n    agencies: agencyReducer,\r\n    lines: linesReducer,\r\n    services: servicesReducer,\r\n    serviceRoutes: serviceRouteReducer,\r\n    stations: stationReducer,\r\n    tracks: trackReducer,\r\n    trackRoutes: trackRouteReducer,\r\n    transfers: transferReducer\r\n});\r\n\r\nfunction crossSliceReducer(state, action) {\r\n    switch (action.type) {\r\n        case ADD_SERVICE: {\r\n            return rootAddService(state, action)\r\n        }\r\n        case ADD_TRACK: {\r\n            return rootAddTrack(state, action)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default function rootReducer(state, action) {\r\n    const intermediateState = combinedReducers(state, action);\r\n    const finalState = crossSliceReducer(intermediateState, action);\r\n    return finalState;\r\n}\r\n\r\nexport function selectAgenciesLinesAndServicesAsTreeObject(state, isSelectable) {\r\n    return selectAllAgencies(state, false).map(agency => {\r\n        return {\r\n            title: agency.name,\r\n            key: agency.id,\r\n            children: selectLinesAndServicesAsTreeObject(state, false, agency.id),\r\n            selectable: isSelectable\r\n        }\r\n    })\r\n}\r\n\r\nexport function selectLinesAndServicesAsTreeObject(state, isSelectable, agencyID) {\r\n    return selectLinesGivenAgencyId(state, agencyID, false).map(line => {\r\n        return {\r\n            title: line.name,\r\n            key: agencyID + \"-\" + line.id,\r\n            children: selectServicesAsTreeObject(state, false, agencyID, line.id),\r\n            selectable: isSelectable\r\n        }\r\n    })\r\n}\r\n\r\nexport function selectServicesAsTreeObject(state, isSelectable, agencyID, lineID) {\r\n    return selectServicesGivenLineID(state, lineID, false).map(service => {\r\n        return {\r\n            title: service.name,\r\n            key: agencyID + \"-\" + lineID + \"-\" + service.id,\r\n            isLeaf: true,\r\n            selectable: isSelectable\r\n        }\r\n    })\r\n}\r\n\r\nfunction rootAddService(state, action) {\r\n    let serviceID = nextIDForArray(state.services);\r\n    return {\r\n        ...state,\r\n        services: doAddService(state.services, action),\r\n        serviceRoutes: doAddServiceRoute(state.serviceRoutes, serviceID)\r\n    }\r\n}\r\n\r\nfunction rootAddTrack(state, action) {\r\n\r\n    let stations = selectStationsGivenStationIDs(state.stations, action.payload.stationIDs)\r\n\r\n    let trackID = nextIDForArray(state.tracks)\r\n    return {\r\n        ...state,\r\n        tracks: doAddTrack(state.tracks, action),\r\n        trackRoutes: doAddTrackRoute(\r\n            state.trackRoutes,\r\n            action,\r\n            trackID,\r\n            stations\r\n        )\r\n    }\r\n}\r\n","E:\\Projects\\metro_maker\\src\\actions\\actionTypes.js",[],"E:\\Projects\\metro_maker\\src\\actions\\lineActions.js",[],"E:\\Projects\\metro_maker\\src\\actions\\serviceActions.js",[],"E:\\Projects\\metro_maker\\src\\utils\\utils.js",["115"],"E:\\Projects\\metro_maker\\src\\components\\testButtonItem.js",[],"E:\\Projects\\metro_maker\\src\\actions\\agencyActions.js",[],"E:\\Projects\\metro_maker\\src\\reducers\\agenciesReducer.js",[],"E:\\Projects\\metro_maker\\src\\reducers\\serviceRouteReducer.js",["116","117","118","119","120"],"E:\\Projects\\metro_maker\\src\\reducers\\stationsReducer.js",[],"E:\\Projects\\metro_maker\\src\\reducers\\trackReducer.js",["121","122","123"],"import { filterById, filterDeleted, genericMultiDelete, genericMultiRestore, genericSingleDelete, genericSingleRestore, nextIDForArray } from '../utils/utils'\r\nimport {\r\n    ADD_TRACK,\r\n    REMOVE_TRACK,\r\n    RESTORE_TRACK,\r\n    REMOVE_STATION,\r\n    RESTORE_STATION\r\n} from '../actions/actionTypes'\r\n\r\nconst initialState = []\r\n\r\nexport default function trackReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case REMOVE_STATION:{\r\n            return genericMultiDelete(\r\n                state,\r\n                getTrackIDsByStationID(\r\n                    state,\r\n                    action.payload.id\r\n                ),\r\n                action.payload.deletedAt\r\n            )\r\n        }\r\n        case REMOVE_TRACK: {\r\n            return genericSingleDelete(\r\n                state,\r\n                action.payload.id,\r\n                action.payload.deletedAt\r\n            )\r\n        }\r\n        case RESTORE_STATION :{\r\n            return genericMultiRestore(\r\n                state,\r\n                getTrackIDsByStationID(\r\n                    state,\r\n                    action.payload.id\r\n                )\r\n            )\r\n        }\r\n        case RESTORE_TRACK :{\r\n            return genericSingleRestore(\r\n                state,\r\n                action.payload.id\r\n            )\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport function doAddTrack(state, action) {\r\n    let trackID = nextIDForArray()\r\n    return [\r\n        ...state,\r\n        {\r\n            id: trackID,\r\n            stationIDs: action.payload.stationIDs,\r\n            deletedAt: null\r\n        }\r\n    ]\r\n}\r\n\r\nfunction getTrackIDsByStationID(tracks, stationID){\r\n    return tracks.filter(track =>{\r\n        return track.stationIDs[0] === stationID ||\r\n        track.stationIDs[1] === stationID\r\n    }).map(track =>{\r\n        return track.id\r\n    })\r\n}\r\n","E:\\Projects\\metro_maker\\src\\reducers\\trackRouteReducer.js",["124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154"],"import { getNodeText } from '@testing-library/dom'\r\nimport { difference, filter } from 'underscore'\r\nimport {\r\n    ADD_NODE,\r\n    EDIT_NODE,\r\n    REMOVE_NODE,\r\n    RESTORE_NODE,\r\n    MOVE_STATION,\r\n    REMOVE_TRACK,\r\n    RESTORE_TRACK,\r\n    ADD_STRAIGHT_SEGMENT,\r\n    ADD_CURVED_SEGMENT,\r\n    STRAIGHT_TO_CURVED,\r\n    CURVED_TO_STRAIGHT,\r\n    BREAK_SEGMENT,\r\n    REMOVE_SEGMENT,\r\n    RESTORE_SEGMENT\r\n} from '../actions/actionTypes'\r\n\r\n/**\r\n * id: int\r\n * stationIDs: [0,1,...]\r\n * nodes: [ {id, lat, long, stationID}, {id, lat, long}]\r\n * segments: [{id, endpoints:[id, id]}]\r\n * deletedAt:\r\n */\r\n\r\nimport { genericMultiDelete, genericSingleDelete, genericSingleRestore, haversineMidpoint, nextIDForArray } from '../utils/utils'\r\n\r\nconst initialState = []\r\n\r\nexport default function trackRouteReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ADD_STRAIGHT_SEGMENT:\r\n        case ADD_CURVED_SEGMENT: {\r\n            return doAddSegmentToTrackRoute(state, action)\r\n        }\r\n        case STRAIGHT_TO_CURVED: {\r\n            return doStraightToCurved(state, action)\r\n        }\r\n        case CURVED_TO_STRAIGHT: {\r\n            return doCurvedToStraight(state, action)\r\n        }\r\n        case BREAK_SEGMENT: {\r\n            return doBreakSegment(state, action)\r\n        }\r\n        case REMOVE_SEGMENT: {\r\n            return doRemoveSegment(state, action)\r\n        }\r\n        case RESTORE_SEGMENT: {\r\n            return doRestoreSegment(state, action)\r\n        }\r\n        case REMOVE_TRACK: {\r\n            return genericSingleDelete(\r\n                state,\r\n                action.payload.id,\r\n                action.payload.deletedAt\r\n            )\r\n        }\r\n        case RESTORE_TRACK: {\r\n            return genericSingleRestore(\r\n                state,\r\n                action.payload.id\r\n            )\r\n        }\r\n        case REMOVE_NODE: {\r\n            return doRemoveNode(state, action)\r\n        }\r\n        case RESTORE_NODE: {\r\n            return doRestoreNode(state, action)\r\n        }\r\n        case EDIT_NODE: {\r\n            return doEditNode(state, action)\r\n        }\r\n        case MOVE_STATION: {\r\n            return doMoveStation(state, action)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// Add Track\r\nexport function doAddTrackRoute(state, action, trackID, stations) {\r\n    return [\r\n        ...state,\r\n        {\r\n            id: trackID,\r\n            stationIDs: [stations[0].id, stations[1].id],\r\n            nodes: [\r\n                {\r\n                    id: 0,\r\n                    stationID: stations[0].id,\r\n                    latitude: stations[0].latitude,\r\n                    longitude: stations[0].longitude,\r\n                    deletedAt: null\r\n                },\r\n                {\r\n                    id: 1,\r\n                    stationID: stations[1].id,\r\n                    latitude: stations[1].latitude,\r\n                    longitude: stations[1].longitude,\r\n                    deletedAt: null\r\n                }\r\n            ],\r\n            segments: [\r\n                {\r\n                    id: 0,\r\n                    isCurved: false,\r\n                    endNodes: [0, 1],\r\n                    controlPoint: null\r\n                }\r\n            ],\r\n            deletedAt: null\r\n        }\r\n    ]\r\n}\r\n\r\nfunction doAddSegmentToTrackRoute(state, action) {\r\n    return state.map(trackRoute => {\r\n        if (trackRoute.id != action.payload.trackID) {\r\n            return trackRoute\r\n        }\r\n        let givenNodeIDs = action.payload.nodeIDs\r\n        let newNodeID = nextIDForArray(trackRoute.nodes)\r\n        let newNodes = trackRoute.nodes.slice(0)\r\n\r\n        for (var i = 0; i < givenNodeIDs; i++) {\r\n            if (!givenNodeIDs[i]) {\r\n                givenNodeIDs[i] = newNodeID\r\n                newNodes.push({\r\n                    id: newNodeID,\r\n                    latitude: action.payload.latitudes[i],\r\n                    longitude: action.payload.longitudes[i],\r\n                    deletedAt: null\r\n                })\r\n                newNodeID = newNodeID + 1\r\n            }\r\n        }\r\n\r\n        let controlPointID = null\r\n        let isCurved = false;\r\n        if (action.type === ADD_CURVED_SEGMENT) {\r\n            controlPointID = givenNodeIDs[2]\r\n            isCurved = true\r\n        }\r\n        let newSegmentID = nextIDForArray(trackRoute.segments)\r\n\r\n        let newSegments = trackRoute.segments.slice(0)\r\n        newSegments.push(\r\n            {\r\n                id: newSegmentID,\r\n                isCurved: isCurved,\r\n                endNodes: [givenNodeIDs[0], givenNodeIDs[1]],\r\n                controlPoint: controlPointID,\r\n                deletedAt: null\r\n            }\r\n        )\r\n        return {\r\n            ...trackRoute,\r\n            nodes: newNodes,\r\n            segments: newSegments\r\n        }\r\n    })\r\n}\r\n\r\nfunction doStraightToCurved(state, action) {\r\n    return state.map(trackRoute => {\r\n        if (trackRoute.id != action.payload.trackID) {\r\n            return trackRoute\r\n        }\r\n\r\n        let newNodes = trackRoute.nodes.slice(0)\r\n        let newSegments = trackRoute.segments.slice(0)\r\n\r\n        let targetSegment = trackRoute.segments[action.payload.id]\r\n\r\n        if (!targetSegment.controlPoint) {\r\n            let newCoords = haversineMidpoint(\r\n                newNodes[targetSegment.endNodes[0]],\r\n                newNodes[targetSegment.endNodes[1]]\r\n            )\r\n            let newNodeID = nextIDForArray(newNodes)\r\n\r\n            newNodes.push({\r\n                id: newNodeID,\r\n                latitude: newCoords[0],\r\n                longitude: newNodes[1],\r\n                deletedAt: null\r\n            })\r\n\r\n            newSegments = newSegments.map(segment => {\r\n                if (segment.id != action.payload.id) {\r\n                    return segment\r\n                }\r\n                return {\r\n                    ...segment,\r\n                    isCurved: false,\r\n                    controlPointID: newNodeID\r\n                }\r\n            })\r\n        } else {\r\n            newSegments = newSegments.map(segment => {\r\n                if (segment.id != action.payload.id) {\r\n                    return segment\r\n                }\r\n                return {\r\n                    ...segment,\r\n                    isCurved: true\r\n                }\r\n            })\r\n        }\r\n\r\n        return {\r\n            ...trackRoute,\r\n            nodes: newNodes,\r\n            segments: newSegments\r\n        }\r\n    })\r\n}\r\n\r\nfunction doCurvedToStraight(state, action) {\r\n    return state.map(trackRoute => {\r\n        if (trackRoute.id != action.payload.trackID) {\r\n            return trackRoute\r\n        }\r\n        let newSegments = trackRoute.segments.slice(0)\r\n\r\n        newSegments = newSegments.map(segment => {\r\n            if (segment.id != action.payload.id) {\r\n                return segment\r\n            }\r\n            return {\r\n                ...segment,\r\n                isCurved: false\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nfunction doBreakSegment(state, action) {\r\n    return state.map(trackRoute => {\r\n        if (trackRoute.id != action.payload.trackID) {\r\n            return trackRoute\r\n        }\r\n        let targetSegment = trackRoute.segments[action.payload.id]\r\n        let newNodes = trackRoute.nodes.slice(0)\r\n        let newSegments = trackRoute.segments.slice(0)\r\n\r\n        let newCoords = haversineMidpoint(\r\n            targetSegment.endNodes[0],\r\n            targetSegment.endNodes[1]\r\n        )\r\n        let newNodeID = nextIDForArray(trackRoute.nodes)\r\n        newNodes.push({\r\n            id: newNodeID,\r\n            latitude: newCoords[0],\r\n            longitude: newCoords[1]\r\n        })\r\n\r\n        targetSegment.endNodes = [\r\n            targetSegment.endNodes[0],\r\n            newNodeID\r\n        ]\r\n\r\n        newSegments.push({\r\n            id: nextIDForArray(trackRoute.segments),\r\n            endNodes: [newNodeID, targetSegment[1]],\r\n            isCurved: false,\r\n            controlPoint: null,\r\n            deletedAt: null\r\n        })\r\n\r\n\r\n        return {\r\n            ...trackRoute,\r\n            nodes: newNodes,\r\n            segments: newSegments\r\n        }\r\n    })\r\n}\r\n\r\nfunction doRemoveSegment(state, action) {\r\n    return state.map(trackRoute => {\r\n        if (trackRoute.id != action.payload.trackID) {\r\n            return trackRoute\r\n        }\r\n\r\n        let removeNodeIds = getNodesThatOnlyGivenSegmentsConnectTo(\r\n            [action.payload.id],\r\n            trackRoute.segments,\r\n            false\r\n        )\r\n\r\n        let newNodes = genericMultiDelete(\r\n            trackRoute.nodes,\r\n            removeNodeIds,\r\n            action.payload.deletedAt\r\n        )\r\n\r\n        let newSegments = genericSingleDelete(\r\n            trackRoute.segments,\r\n            action.payload.id,\r\n            action.payload.deletedAt\r\n        )\r\n        return {\r\n            ...trackRoute,\r\n            nodes: newNodes,\r\n            segments: newSegments\r\n        }\r\n    })\r\n}\r\n\r\nfunction doRestoreSegment(state, action) {\r\n    return state.map(trackRoute => {\r\n        if (trackRoute.id != action.payload.trackID) {\r\n            return trackRoute\r\n        }\r\n\r\n        let restoreNodeIds = getNodesThatOnlyGivenSegmentsConnectTo(\r\n            [action.payload.id],\r\n            trackRoute.segments,\r\n            true\r\n        )\r\n\r\n        let newNodes = genericMultiDelete(\r\n            trackRoute.nodes,\r\n            restoreNodeIds,\r\n            action.payload.deletedAt\r\n        )\r\n\r\n        let newSegments = genericSingleDelete(\r\n            trackRoute.segments,\r\n            action.payload.id,\r\n            action.payload.deletedAt\r\n        )\r\n        return {\r\n            ...trackRoute,\r\n            nodes: newNodes,\r\n            segments: newSegments\r\n        }\r\n    })\r\n}\r\n\r\nfunction getNodesThatOnlyGivenSegmentsConnectTo(subset, fullset, includeStationNodes) {\r\n\r\n    let subsetNodeIds = []\r\n    for (var i = 0; i < subset.length(); i++) {\r\n        let curSegment = subset[i]\r\n        subsetNodeIds.push(curSegment.endNodes[0])\r\n        subsetNodeIds.push(curSegment.endNodes[1])\r\n        if (curSegment.controlPointID) {\r\n            subsetNodeIds.push(curSegment.controlPointID)\r\n        }\r\n    }\r\n\r\n    let differenceSet = difference(\r\n        fullset,\r\n        subset\r\n    )\r\n    let differenceSetNodeIds = []\r\n\r\n    for (var i = 0; i < differenceSet.length(); i++) {\r\n        let curSegment = differenceSet[i]\r\n        differenceSetNodeIds.push(curSegment.endNodes[0])\r\n        differenceSetNodeIds.push(curSegment.endNodes[1])\r\n        if (curSegment.controlPointID) {\r\n            differenceSetNodeIds.push(curSegment.controlPointID)\r\n        }\r\n    }\r\n    let subsetOnlyNodeIds = difference(\r\n        subsetNodeIds,\r\n        differenceSetNodeIds\r\n    )\r\n\r\n    if (includeStationNodes == false) {\r\n        let checkSet = new Set(subsetOnlyNodeIds)\r\n        checkSet.delete(0)\r\n        checkSet.delete(1)\r\n        return Array.from(checkSet)\r\n    }\r\n    return subsetOnlyNodeIds\r\n}\r\n\r\nfunction doEditNode(state, action) {\r\n\r\n    return state.map(trackRoute => {\r\n        if (trackRoute.id != action.payload.trackID) {\r\n            return trackRoute\r\n        }\r\n        let newNodes = trackRoute.nodes.map(item => {\r\n            if (item.id != action.payload.id) {\r\n                return item\r\n            }\r\n            return {\r\n                ...item,\r\n                latitude: action.payload.latitude,\r\n                longitude: action.payload.longitude\r\n            }\r\n        })\r\n\r\n        return {\r\n            ...trackRoute,\r\n            nodes: newNodes\r\n        }\r\n    })\r\n}\r\n\r\nfunction doMoveStation(state, action) {\r\n    return state.map(trackRoute => {\r\n        if (trackRoute.stationIDs[0] != action.payload.id &&\r\n            trackRoute.stationIDs[1] != action.payload.id) {\r\n            return trackRoute\r\n        }\r\n        else if (trackRoute.stationIDs[0] == action.payload.id) {\r\n            return {\r\n                ...trackRoute,\r\n                nodes: moveSpecificNode(\r\n                    action.payload.latitude,\r\n                    action.payload.longitude,\r\n                    0,\r\n                    trackRoute.nodes\r\n                )\r\n            }\r\n        }\r\n        else if (trackRoute.stationIDs[1] == action.payload.id) {\r\n            return {\r\n                ...trackRoute,\r\n                nodes: moveSpecificNode(\r\n                    action.payload.latitude,\r\n                    action.payload.longitude,\r\n                    1,\r\n                    trackRoute.nodes\r\n                )\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nfunction moveSpecificNode(latitude, longitude, nodeIndex, nodes) {\r\n    return nodes.map((node, index) => {\r\n        if (index === nodeIndex) {\r\n            return {\r\n                ...node,\r\n                latitude: latitude,\r\n                longitude: longitude\r\n            }\r\n        } else {\r\n            return node\r\n        }\r\n    })\r\n}\r\n\r\nfunction doRemoveNode(state, action) {\r\n    return state.map(trackRoute => {\r\n        if (trackRoute.id != action.payload.trackID) {\r\n            return trackRoute\r\n        }\r\n\r\n        let removeSegments = trackRoute.segments.filter(segment => {\r\n            return segment.endNodes[0] == action.payload.id ||\r\n                segment.endNodes[1] == action.payload.id ||\r\n                segment.controlPointID == action.payload.id\r\n        })\r\n\r\n        let removeSegmentIDs = removeSegments.map(segment => {\r\n            return segment.id\r\n        })\r\n\r\n        let removeNodeIds = getNodesThatOnlyGivenSegmentsConnectTo(\r\n            removeSegments,\r\n            trackRoute.segments,\r\n            false\r\n        )\r\n\r\n        let newSegments = genericMultiDelete(\r\n            trackRoute.segments,\r\n            removeSegmentIDs,\r\n            action.payload.deletedAt\r\n        )\r\n\r\n        let newNodes = genericMultiDelete(\r\n            trackRoute.nodes,\r\n            removeNodeIds,\r\n            action.payload.deletedAt\r\n        )\r\n\r\n        return {\r\n            ...trackRoute,\r\n            nodes: newNodes,\r\n            segments: newSegments\r\n        }\r\n    })\r\n}\r\n\r\nfunction doRestoreNode(state, action) {\r\n    return state.map(trackRoute => {\r\n        if (trackRoute.id != action.payload.trackID) {\r\n            return trackRoute\r\n        }\r\n\r\n        // get the segments that are attached to the to be removed node\r\n\r\n        let restoreSegments = trackRoute.segments.filter(segment => {\r\n            return segment.endNodes[0] == action.payload.id ||\r\n                segment.endNodes[1] == action.payload.id ||\r\n                segment.controlPointID == action.payload.id\r\n        })\r\n\r\n        let restoreSegmentIDs = restoreSegments.map(segment => {\r\n            return segment.id\r\n        })\r\n\r\n        let restoreNodeIds = getNodesThatOnlyGivenSegmentsConnectTo(\r\n            restoreSegments,\r\n            trackRoute.segments,\r\n            true\r\n        )\r\n\r\n        let newSegments = genericMultiDelete(\r\n            trackRoute.segments,\r\n            restoreSegmentIDs,\r\n            action.payload.deletedAt\r\n        )\r\n\r\n        let newNodes = genericMultiDelete(\r\n            trackRoute.nodes,\r\n            restoreNodeIds,\r\n            action.payload.deletedAt\r\n        )\r\n\r\n        return {\r\n            ...trackRoute,\r\n            nodes: newNodes,\r\n            segments: newSegments\r\n        }\r\n    })\r\n}\r\n","E:\\Projects\\metro_maker\\src\\reducers\\transferReducer.js",["155","156","157","158","159","160"],{"ruleId":"161","severity":1,"message":"162","line":5,"column":8,"nodeType":"163","messageId":"164","endLine":5,"endColumn":23},{"ruleId":"161","severity":1,"message":"165","line":9,"column":52,"nodeType":"163","messageId":"164","endLine":9,"endColumn":86},{"ruleId":"161","severity":1,"message":"166","line":9,"column":87,"nodeType":"163","messageId":"164","endLine":9,"endColumn":113},{"ruleId":"161","severity":1,"message":"167","line":11,"column":41,"nodeType":"163","messageId":"164","endLine":11,"endColumn":52},{"ruleId":"161","severity":1,"message":"168","line":12,"column":50,"nodeType":"163","messageId":"164","endLine":12,"endColumn":64},{"ruleId":"161","severity":1,"message":"169","line":13,"column":9,"nodeType":"163","messageId":"164","endLine":13,"endColumn":22},{"ruleId":"161","severity":1,"message":"170","line":13,"column":24,"nodeType":"163","messageId":"164","endLine":13,"endColumn":38},{"ruleId":"161","severity":1,"message":"171","line":14,"column":10,"nodeType":"163","messageId":"164","endLine":14,"endColumn":35},{"ruleId":"161","severity":1,"message":"172","line":14,"column":64,"nodeType":"163","messageId":"164","endLine":14,"endColumn":87},{"ruleId":"161","severity":1,"message":"173","line":16,"column":10,"nodeType":"163","messageId":"164","endLine":16,"endColumn":30},{"ruleId":"161","severity":1,"message":"174","line":16,"column":31,"nodeType":"163","messageId":"164","endLine":16,"endColumn":55},{"ruleId":"161","severity":1,"message":"175","line":94,"column":5,"nodeType":"163","messageId":"164","endLine":94,"endColumn":14},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"161","severity":1,"message":"180","line":1,"column":17,"nodeType":"163","messageId":"164","endLine":1,"endColumn":25},{"ruleId":"161","severity":1,"message":"181","line":2,"column":10,"nodeType":"163","messageId":"164","endLine":2,"endColumn":21},{"ruleId":"161","severity":1,"message":"182","line":2,"column":23,"nodeType":"163","messageId":"164","endLine":2,"endColumn":34},{"ruleId":"183","severity":1,"message":"184","line":68,"column":21,"nodeType":"185","messageId":"186","endLine":68,"endColumn":23},{"ruleId":"161","severity":1,"message":"187","line":4,"column":5,"nodeType":"163","messageId":"164","endLine":4,"endColumn":16},{"ruleId":"183","severity":1,"message":"188","line":95,"column":31,"nodeType":"185","messageId":"186","endLine":95,"endColumn":33},{"ruleId":"161","severity":1,"message":"189","line":10,"column":10,"nodeType":"163","messageId":"164","endLine":10,"endColumn":20},{"ruleId":"161","severity":1,"message":"190","line":10,"column":22,"nodeType":"163","messageId":"164","endLine":10,"endColumn":53},{"ruleId":"161","severity":1,"message":"191","line":1,"column":10,"nodeType":"163","messageId":"164","endLine":1,"endColumn":18},{"ruleId":"161","severity":1,"message":"170","line":1,"column":121,"nodeType":"163","messageId":"164","endLine":1,"endColumn":135},{"ruleId":"161","severity":1,"message":"192","line":21,"column":8,"nodeType":"163","messageId":"164","endLine":21,"endColumn":9},{"ruleId":"183","severity":1,"message":"188","line":162,"column":41,"nodeType":"185","messageId":"186","endLine":162,"endColumn":43},{"ruleId":"161","severity":1,"message":"193","line":543,"column":10,"nodeType":"163","messageId":"164","endLine":543,"endColumn":37},{"ruleId":"161","severity":1,"message":"194","line":551,"column":10,"nodeType":"163","messageId":"164","endLine":551,"endColumn":30},{"ruleId":"161","severity":1,"message":"195","line":1,"column":10,"nodeType":"163","messageId":"164","endLine":1,"endColumn":20},{"ruleId":"161","severity":1,"message":"169","line":1,"column":22,"nodeType":"163","messageId":"164","endLine":1,"endColumn":35},{"ruleId":"161","severity":1,"message":"196","line":3,"column":5,"nodeType":"163","messageId":"164","endLine":3,"endColumn":14},{"ruleId":"161","severity":1,"message":"197","line":1,"column":10,"nodeType":"163","messageId":"164","endLine":1,"endColumn":21},{"ruleId":"161","severity":1,"message":"198","line":2,"column":22,"nodeType":"163","messageId":"164","endLine":2,"endColumn":28},{"ruleId":"161","severity":1,"message":"199","line":4,"column":5,"nodeType":"163","messageId":"164","endLine":4,"endColumn":13},{"ruleId":"183","severity":1,"message":"184","line":122,"column":27,"nodeType":"185","messageId":"186","endLine":122,"endColumn":29},{"ruleId":"183","severity":1,"message":"184","line":170,"column":27,"nodeType":"185","messageId":"186","endLine":170,"endColumn":29},{"ruleId":"183","severity":1,"message":"184","line":194,"column":32,"nodeType":"185","messageId":"186","endLine":194,"endColumn":34},{"ruleId":"183","severity":1,"message":"184","line":205,"column":32,"nodeType":"185","messageId":"186","endLine":205,"endColumn":34},{"ruleId":"200","severity":1,"message":"201","line":224,"column":33,"nodeType":"202","messageId":"203","endLine":224,"endColumn":35},{"ruleId":"183","severity":1,"message":"184","line":225,"column":27,"nodeType":"185","messageId":"186","endLine":225,"endColumn":29},{"ruleId":"161","severity":1,"message":"204","line":230,"column":9,"nodeType":"163","messageId":"164","endLine":230,"endColumn":20},{"ruleId":"183","severity":1,"message":"184","line":231,"column":28,"nodeType":"185","messageId":"186","endLine":231,"endColumn":30},{"ruleId":"183","severity":1,"message":"184","line":244,"column":27,"nodeType":"185","messageId":"186","endLine":244,"endColumn":29},{"ruleId":"183","severity":1,"message":"184","line":286,"column":27,"nodeType":"185","messageId":"186","endLine":286,"endColumn":29},{"ruleId":"183","severity":1,"message":"184","line":317,"column":27,"nodeType":"185","messageId":"186","endLine":317,"endColumn":29},{"ruleId":"205","severity":1,"message":"206","line":364,"column":14,"nodeType":"163","messageId":"207","endLine":364,"endColumn":15},{"ruleId":"183","severity":1,"message":"188","line":377,"column":29,"nodeType":"185","messageId":"186","endLine":377,"endColumn":31},{"ruleId":"183","severity":1,"message":"184","line":389,"column":27,"nodeType":"185","messageId":"186","endLine":389,"endColumn":29},{"ruleId":"183","severity":1,"message":"184","line":393,"column":25,"nodeType":"185","messageId":"186","endLine":393,"endColumn":27},{"ruleId":"200","severity":1,"message":"201","line":411,"column":33,"nodeType":"202","messageId":"203","endLine":411,"endColumn":35},{"ruleId":"183","severity":1,"message":"184","line":412,"column":38,"nodeType":"185","messageId":"186","endLine":412,"endColumn":40},{"ruleId":"183","severity":1,"message":"184","line":413,"column":38,"nodeType":"185","messageId":"186","endLine":413,"endColumn":40},{"ruleId":"183","severity":1,"message":"188","line":416,"column":43,"nodeType":"185","messageId":"186","endLine":416,"endColumn":45},{"ruleId":"183","severity":1,"message":"188","line":427,"column":43,"nodeType":"185","messageId":"186","endLine":427,"endColumn":45},{"ruleId":"183","severity":1,"message":"184","line":457,"column":27,"nodeType":"185","messageId":"186","endLine":457,"endColumn":29},{"ruleId":"183","severity":1,"message":"188","line":462,"column":40,"nodeType":"185","messageId":"186","endLine":462,"endColumn":42},{"ruleId":"183","severity":1,"message":"188","line":463,"column":37,"nodeType":"185","messageId":"186","endLine":463,"endColumn":39},{"ruleId":"183","severity":1,"message":"188","line":464,"column":40,"nodeType":"185","messageId":"186","endLine":464,"endColumn":42},{"ruleId":"183","severity":1,"message":"184","line":499,"column":27,"nodeType":"185","messageId":"186","endLine":499,"endColumn":29},{"ruleId":"183","severity":1,"message":"188","line":506,"column":40,"nodeType":"185","messageId":"186","endLine":506,"endColumn":42},{"ruleId":"183","severity":1,"message":"188","line":507,"column":37,"nodeType":"185","messageId":"186","endLine":507,"endColumn":39},{"ruleId":"183","severity":1,"message":"188","line":508,"column":40,"nodeType":"185","messageId":"186","endLine":508,"endColumn":42},{"ruleId":"161","severity":1,"message":"192","line":1,"column":8,"nodeType":"163","messageId":"164","endLine":1,"endColumn":9},{"ruleId":"208","severity":1,"message":"209","line":37,"column":9,"nodeType":"210","messageId":"211","endLine":46,"endColumn":10},{"ruleId":"208","severity":1,"message":"209","line":64,"column":9,"nodeType":"210","messageId":"211","endLine":72,"endColumn":10},{"ruleId":"183","severity":1,"message":"184","line":99,"column":21,"nodeType":"185","messageId":"186","endLine":99,"endColumn":23},{"ruleId":"183","severity":1,"message":"188","line":150,"column":40,"nodeType":"185","messageId":"186","endLine":150,"endColumn":42},{"ruleId":"183","severity":1,"message":"188","line":150,"column":79,"nodeType":"185","messageId":"186","endLine":150,"endColumn":81},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'selectLinesAndServicesAsTreeObject' is defined but never used.","'selectServicesAsTreeObject' is defined but never used.","'restoreLine' is defined but never used.","'restoreService' is defined but never used.","'filterDeleted' is defined but never used.","'nextIDForArray' is defined but never used.","'selectServicesGivenLineID' is defined but never used.","'serviceIDsGivenAgencyID' is defined but never used.","'lineIDsGivenAgencyId' is defined but never used.","'selectLinesGivenAgencyId' is defined but never used.","'testArray' is assigned a value but never used.","no-native-reassign",["212"],"no-negated-in-lhs",["213"],"'useState' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'ADD_SERVICE' is defined but never used.","Expected '===' and instead saw '=='.","'addStation' is defined but never used.","'selectAllNodeIdsGivenStationIDs' is defined but never used.","'Provider' is defined but never used.","'_' is defined but never used.","'validActionsForServiceRoute' is defined but never used.","'isTrackBlockComplete' is defined but never used.","'filterById' is defined but never used.","'ADD_TRACK' is defined but never used.","'getNodeText' is defined but never used.","'filter' is defined but never used.","'ADD_NODE' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'newSegments' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-global-assign","no-unsafe-negation"]