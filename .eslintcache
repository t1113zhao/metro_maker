[{"E:\\Projects\\metro_maker\\src\\index.js":"1","E:\\Projects\\metro_maker\\src\\reportWebVitals.js":"2","E:\\Projects\\metro_maker\\src\\App.js":"3","E:\\Projects\\metro_maker\\src\\sidebar.js":"4","E:\\Projects\\metro_maker\\src\\reducers\\operatorsReducer.js":"5","E:\\Projects\\metro_maker\\src\\components\\testButton.js":"6","E:\\Projects\\metro_maker\\src\\app\\store.js":"7","E:\\Projects\\metro_maker\\src\\reducers\\linesReducer.js":"8","E:\\Projects\\metro_maker\\src\\reducers\\servicesReducer.js":"9","E:\\Projects\\metro_maker\\src\\reducers\\rootReducer.js":"10","E:\\Projects\\metro_maker\\src\\actions\\actionTypes.js":"11","E:\\Projects\\metro_maker\\src\\actions\\lineActions.js":"12","E:\\Projects\\metro_maker\\src\\actions\\operatorActions.js":"13","E:\\Projects\\metro_maker\\src\\actions\\serviceActions.js":"14","E:\\Projects\\metro_maker\\src\\utils\\utils.js":"15","E:\\Projects\\metro_maker\\src\\components\\testButtonItem.js":"16"},{"size":3817,"mtime":1614228056641,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":238,"mtime":1614227991355,"results":"20","hashOfConfig":"18"},{"size":326,"mtime":1609641548714,"results":"21","hashOfConfig":"18"},{"size":2051,"mtime":1611809575211,"results":"22","hashOfConfig":"18"},{"size":691,"mtime":1614228228829,"results":"23","hashOfConfig":"18"},{"size":167,"mtime":1610773355537,"results":"24","hashOfConfig":"18"},{"size":2917,"mtime":1611803253658,"results":"25","hashOfConfig":"18"},{"size":3600,"mtime":1611810294398,"results":"26","hashOfConfig":"18"},{"size":1573,"mtime":1613277010958,"results":"27","hashOfConfig":"18"},{"size":1032,"mtime":1611899913634,"results":"28","hashOfConfig":"18"},{"size":1332,"mtime":1611798094908,"results":"29","hashOfConfig":"18"},{"size":1381,"mtime":1613276987471,"results":"30","hashOfConfig":"18"},{"size":1172,"mtime":1611797450339,"results":"31","hashOfConfig":"18"},{"size":150,"mtime":1613276743736,"results":"32","hashOfConfig":"18"},{"size":231,"mtime":1614228296845,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"e2pt3f",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Projects\\metro_maker\\src\\index.js",["70","71","72","73","74","75"],"E:\\Projects\\metro_maker\\src\\reportWebVitals.js",[],["76","77"],"E:\\Projects\\metro_maker\\src\\App.js",[],"E:\\Projects\\metro_maker\\src\\sidebar.js",[],"E:\\Projects\\metro_maker\\src\\reducers\\operatorsReducer.js",["78","79","80","81"],"import { nextIDForArray } from '../utils/utils'\r\nimport {ADD_OPERATOR,\r\n    EDIT_OPERATOR,\r\n    REMOVE_OPERATOR,\r\n    UNDO_REMOVE_OPERATOR} from '../actions/actionTypes'\r\nconst initialOperatorState = []\r\n\r\nexport default function operatorReducer (state= initialOperatorState, action){\r\n    switch(action.type){\r\n        case ADD_OPERATOR:{\r\n            return doAddOperator(state,action);\r\n        }\r\n        case EDIT_OPERATOR:{\r\n            return doEditOperator(state,action);\r\n        }\r\n        case REMOVE_OPERATOR:{\r\n            return doRemoveOperator(state,action);\r\n        }\r\n        case UNDO_REMOVE_OPERATOR:{\r\n            return doUnRemoveOperator(state,action);\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction doAddOperator(state, action) {\r\n    return [\r\n        ...state,\r\n        {\r\n            id: nextIDForArray(state),\r\n            name: action.payload.name,\r\n            color: action.payload.color,\r\n            deletedAt: null\r\n        }\r\n    ]\r\n}\r\n\r\nfunction doEditOperator(state, action) {\r\n    return state.map(item => {\r\n        if (item.id != action.payload.id) {\r\n            return item\r\n        }\r\n        return {\r\n            ...item,\r\n            name: action.payload.name,\r\n            color: action.payload.color\r\n        }\r\n    })\r\n}\r\n\r\nfunction doRemoveOperator(state, action) {\r\n    return state.map(item => {\r\n        if (item.id != action.payload.id) {\r\n            return item\r\n        }\r\n        return {\r\n            ...item,\r\n            deletedAt: action.payload.deletedAt\r\n        }\r\n    })\r\n}\r\n\r\nfunction doUnRemoveOperator(state, action) {\r\n    return state.map(item => {\r\n        if (item.id != action.payload.id) {\r\n            return item\r\n        }\r\n        return {\r\n            ...item,\r\n            deletedAt: null\r\n        }\r\n    })\r\n}\r\n\r\nexport function selectAllOperators(state) {\r\n    return state.operators\r\n}\r\n\r\nexport function selectOperatorsGivenId(state,id){\r\n    return state.operators.filter(operator =>{\r\n        return operator.id == id  \r\n    })\r\n}\r\n","E:\\Projects\\metro_maker\\src\\components\\testButton.js",["82","83","84"],"E:\\Projects\\metro_maker\\src\\app\\store.js",[],"E:\\Projects\\metro_maker\\src\\reducers\\linesReducer.js",["85","86","87"],"import { nextIDForArray } from '../utils/utils'\r\nimport {ADD_LINE,\r\n    EDIT_LINE,\r\n    REMOVE_LINE,\r\n    UNDO_REMOVE_LINE,\r\n    REMOVE_OPERATOR,\r\n    UNDO_REMOVE_OPERATOR} from '../actions/actionTypes'\r\n\r\nconst initialLineState = [];\r\n\r\nexport default function lineReducer (state = initialLineState, action){\r\n    switch(action.type){\r\n        case ADD_LINE:{\r\n            return doAddLine(state,action);\r\n        }\r\n        case EDIT_LINE:{\r\n            return doEditLine(state,action);\r\n        }\r\n        case REMOVE_OPERATOR:\r\n        case REMOVE_LINE:{\r\n            return doRemoveLines(state,action);\r\n        }\r\n        case UNDO_REMOVE_OPERATOR:\r\n        case UNDO_REMOVE_LINE:{\r\n            return doUnRemoveLines(state,action);\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction doAddLine(state, action) {\r\n    return [\r\n        ...state,\r\n        {\r\n            id: nextIDForArray(state),\r\n            operatorID: action.payload.operatorID,\r\n            name: action.payload.name,\r\n            color: action.payload.color,\r\n            linetype: action.payload.linetype,\r\n            deletedAt: null\r\n        }\r\n    ]\r\n}\r\n\r\nfunction doEditLine(state, action) {\r\n    return state.map(item => {\r\n            if (item.id != action.payload.id) {\r\n                return item\r\n            }\r\n            return {\r\n                ...item,\r\n                name: action.payload.name,\r\n                color: action.payload.color,\r\n                linetype: action.payload.linetype\r\n            }\r\n        })\r\n}\r\n\r\n// Remove Operators calls this for every line that Operator contains\r\nfunction doRemoveLines(state, action) {\r\n    var lineIDset = new Set(action.payload.lineIDs)\r\n\r\n    return state.map((item) => {\r\n            if (lineIDset.has(item.id)) {\r\n                return {\r\n                    ...item,\r\n                    deletedAt: action.payload.deletedAt\r\n                }\r\n            } else {\r\n                return item\r\n            }\r\n        })\r\n}\r\n\r\nfunction doUnRemoveLines(state, action) {\r\n    var lineIDset = new Set(action.payload.lineIDs)\r\n\r\n    return state.map((item) => {\r\n            if (lineIDset.has(item.id)) {\r\n                return {\r\n                    ...item,\r\n                    deletedAt: null\r\n                }\r\n            } else {\r\n                return item\r\n            }\r\n        })\r\n}\r\n\r\nexport function selectAllLines (state){\r\n    return state.lines\r\n}\r\n\r\nexport function selectLineGivenID(state,id){\r\n    return state.lines.filter(line =>{\r\n        return line.id == id\r\n    })\r\n}\r\n\r\nexport function selectLinesGivenOperatorId (state, operatorID){\r\n    return state.lines.filter(line =>{\r\n        return line.operatorID == operatorID\r\n    })\r\n}\r\n\r\nexport function lineIDsGivenOperatorId (state, operatorID){\r\n    return selectLinesGivenOperatorId(state,operatorID).map(line => {\r\n            return line.id\r\n        }\r\n    )\r\n}","E:\\Projects\\metro_maker\\src\\reducers\\servicesReducer.js",["88","89"],"import { nextIDForArray } from '../utils/utils'\r\nimport {lineIDsGivenOperatorId} from './linesReducer.js'\r\nimport {ADD_SERVICE,\r\n    EDIT_SERVICE,\r\n    REMOVE_SERVICE,\r\n    UNDO_REMOVE_SERVICE,\r\n    REMOVE_LINE,\r\n    UNDO_REMOVE_LINE,\r\n    REMOVE_OPERATOR,\r\n    UNDO_REMOVE_OPERATOR} from '../actions/actionTypes'\r\n    \r\nconst initialServicesState = []\r\n\r\nexport default function serviceReducer(state = initialServicesState, action){\r\n    switch(action.type){\r\n        case ADD_SERVICE:{\r\n            return doAddService(state,action);\r\n        }\r\n        case EDIT_SERVICE:{\r\n            return doEditService(state,action);\r\n        }\r\n        case REMOVE_OPERATOR:\r\n        case REMOVE_LINE:\r\n        case REMOVE_SERVICE:{\r\n            return doRemoveServices(state,action);\r\n        }\r\n        case UNDO_REMOVE_OPERATOR:\r\n        case UNDO_REMOVE_LINE:\r\n        case UNDO_REMOVE_SERVICE:{\r\n            return doUnRemoveServices(state,action);\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction doAddService(state, action) {\r\n    return [\r\n        ...state,\r\n        {\r\n            id: nextIDForArray(state),\r\n            lineID: action.payload.lineID,\r\n            name: action.payload.name,\r\n            servicePeriod: action.payload.servicePeriod,\r\n            frequency: action.payload.frequency,\r\n            deletedAt: null\r\n        }\r\n    ]\r\n}\r\n\r\nfunction doEditService(state, action) {\r\n    return state.map((item, index) => {\r\n            if (index !== action.payload.id) {\r\n                return item\r\n            }\r\n            return {\r\n                ...item,\r\n                name: action.payload.name,\r\n                servicePeriod: action.payload.serviceType,\r\n                frequency: action.payload.frequency\r\n            }\r\n        })\r\n}\r\n\r\n//Multiple Services are removed when lines and operators are removed\r\nfunction doRemoveServices(state, action) {\r\n    var serviceIDSet = new Set(action.payload.serviceIDs)\r\n    return state.map((item) => {\r\n            if (serviceIDSet.has(item.id)) {\r\n                return {\r\n                    ...item,\r\n                    deletedAt: action.payload.deletedAt\r\n                }\r\n            } else {\r\n                return item\r\n            }   \r\n        })\r\n}\r\n  \r\nfunction doUnRemoveServices(state, action) {\r\n    var serviceIDSet = new Set(action.payload.serviceIDs)\r\n    return state.map((item) => {\r\n            if (serviceIDSet.has(item.id)) {\r\n                return {\r\n                    ...item,\r\n                    deletedAt: null\r\n                }\r\n            } else {\r\n                return item\r\n            }\r\n        })\r\n}\r\n\r\n\r\nexport function selectAllServices(state){\r\n    return state.services;\r\n}\r\n\r\nexport function selectServiceGivenID(state,id){\r\n    return state.services.filter(service =>{\r\n        return service.id == id\r\n    })\r\n}\r\n\r\nexport function selectServicesGivenLineID(state,lineID){\r\n    return state.services.filter(service =>{\r\n        return service.lineID == lineID\r\n    })\r\n}\r\n\r\nexport function serviceIDsGivenLineID(state,lineID){\r\n    return selectServicesGivenLineID(state,lineID).map(service =>{\r\n        return service.id\r\n    })\r\n}\r\n\r\nexport function selectServicesGivenOperatorID(state,operatorID){\r\n    let lineIDs = new Set(lineIDsGivenOperatorId(state,operatorID))\r\n\r\n    return state.services.filter(service =>{\r\n        return lineIDs.has(service.lineID)\r\n    })\r\n}\r\n\r\nexport function serviceIDsGivenOperatorID(state,operatorID){\r\n    return selectServicesGivenOperatorID(state,operatorID).map(service =>{\r\n        return service.id\r\n    })\r\n}","E:\\Projects\\metro_maker\\src\\reducers\\rootReducer.js",[],"E:\\Projects\\metro_maker\\src\\actions\\actionTypes.js",[],"E:\\Projects\\metro_maker\\src\\actions\\lineActions.js",[],"E:\\Projects\\metro_maker\\src\\actions\\operatorActions.js",[],"E:\\Projects\\metro_maker\\src\\actions\\serviceActions.js",[],"E:\\Projects\\metro_maker\\src\\utils\\utils.js",[],"E:\\Projects\\metro_maker\\src\\components\\testButtonItem.js",[],{"ruleId":"90","severity":1,"message":"91","line":6,"column":8,"nodeType":"92","messageId":"93","endLine":6,"endColumn":23},{"ruleId":"90","severity":1,"message":"94","line":10,"column":53,"nodeType":"92","messageId":"93","endLine":10,"endColumn":87},{"ruleId":"90","severity":1,"message":"95","line":10,"column":88,"nodeType":"92","messageId":"93","endLine":10,"endColumn":114},{"ruleId":"90","severity":1,"message":"96","line":14,"column":10,"nodeType":"92","messageId":"93","endLine":14,"endColumn":32},{"ruleId":"90","severity":1,"message":"97","line":15,"column":9,"nodeType":"92","messageId":"93","endLine":15,"endColumn":23},{"ruleId":"90","severity":1,"message":"98","line":15,"column":24,"nodeType":"92","messageId":"93","endLine":15,"endColumn":39},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":41,"column":21,"nodeType":"105","messageId":"106","endLine":41,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":54,"column":21,"nodeType":"105","messageId":"106","endLine":54,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":66,"column":21,"nodeType":"105","messageId":"106","endLine":66,"endColumn":23},{"ruleId":"103","severity":1,"message":"107","line":82,"column":28,"nodeType":"105","messageId":"106","endLine":82,"endColumn":30},{"ruleId":"90","severity":1,"message":"108","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"109","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":21},{"ruleId":"90","severity":1,"message":"110","line":2,"column":23,"nodeType":"92","messageId":"93","endLine":2,"endColumn":34},{"ruleId":"103","severity":1,"message":"104","line":48,"column":25,"nodeType":"105","messageId":"106","endLine":48,"endColumn":27},{"ruleId":"103","severity":1,"message":"107","line":97,"column":24,"nodeType":"105","messageId":"106","endLine":97,"endColumn":26},{"ruleId":"103","severity":1,"message":"107","line":103,"column":32,"nodeType":"105","messageId":"106","endLine":103,"endColumn":34},{"ruleId":"103","severity":1,"message":"107","line":101,"column":27,"nodeType":"105","messageId":"106","endLine":101,"endColumn":29},{"ruleId":"103","severity":1,"message":"107","line":107,"column":31,"nodeType":"105","messageId":"106","endLine":107,"endColumn":33},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","'selectLinesAndServicesAsTreeObject' is defined but never used.","'selectServicesAsTreeObject' is defined but never used.","'lineIDsGivenOperatorId' is defined but never used.","'nextIDForArray' is defined but never used.","'nextKeyForArray' is defined but never used.","no-native-reassign",["111"],"no-negated-in-lhs",["112"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useState' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","no-global-assign","no-unsafe-negation"]